#!/bin/bash
#Copyright (c) 2009  Eucalyptus Systems, Inc.	
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by 
#the Free Software Foundation, only version 3 of the License.  
# 
#This file is distributed in the hope that it will be useful, but WITHOUT
#ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#for more details.  
#
#You should have received a copy of the GNU General Public License along
#with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
#Please contact Eucalyptus Systems, Inc., 130 Castilian
#Dr., Goleta, CA 93101 USA or visit <http://www.eucalyptus.com/licenses/> 
#if you need additional information or have any questions.
#
#This file may incorporate work covered under the following copyright and
#permission notice:
#
#  Software License Agreement (BSD License)
#
#  Copyright (c) 2008, Regents of the University of California
#  
#
#  Redistribution and use of this software in source and binary forms, with
#  or without modification, are permitted provided that the following
#  conditions are met:
#
#    Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#    Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
#  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. USERS OF
#  THIS SOFTWARE ACKNOWLEDGE THE POSSIBLE PRESENCE OF OTHER OPEN SOURCE
#  LICENSED MATERIAL, COPYRIGHTED MATERIAL OR PATENTED MATERIAL IN THIS
#  SOFTWARE, AND IF ANY SUCH MATERIAL IS DISCOVERED THE PARTY DISCOVERING
#  IT MAY INFORM DR. RICH WOLSKI AT THE UNIVERSITY OF CALIFORNIA, SANTA
#  BARBARA WHO WILL THEN ASCERTAIN THE MOST APPROPRIATE REMEDY, WHICH IN
#  THE REGENTS' DISCRETION MAY INCLUDE, WITHOUT LIMITATION, REPLACEMENT
#  OF THE CODE SO IDENTIFIED, LICENSING OF THE CODE SO IDENTIFIED, OR
#  WITHDRAWAL OF THE CODE CAPABILITY TO THE EXTENT NEEDED TO COMPLY WITH
#  ANY SUCH LICENSES OR RIGHTS.
#
#
# Init script for the Eucalyptus cluster controller
#
# chkconfig: 2345 99 05
# description: script for starting and stopping eucalyptus cluster controller
#
### BEGIN INIT INFO
# Provides:                   eucalyptus-cc
# Required-Start:             $remote_fs $syslog 
# Required-Stop:              $remote_fs $syslog 
# Default-Start:              2 3 4 5
# Default-Stop:               0 1 6
# Short-Description:          Start Eucalyptus cluster controller
# Description:                Start the Eucalyptus cluster controller
### END INIT INFO
#

# Do NOT "set -e"

# if we have lsb functions let's source them
WE_HAVE_LSB="N"
if [ -e /lib/lsb/init-functions ]; then
	. /lib/lsb/init-functions
	# very old lsb don't have the functions we need
	if type log_daemon_msg > /dev/null 2> /dev/null ; then
		WE_HAVE_LSB="Y"
	fi
fi

if [ "$EUID" != "0" ]; then
	echo "Eucalyptus init scripts must be run as root."
	exit 1
fi

# I just wanted to set PATH to be the system PATH, but if a user install
# eucalyptus manually, it may have binaries in a non-standard position:
# hence we need to keep the PATH we receive.
export PATH=/sbin:/usr/sbin:/bin:/usr/bin:$PATH
DESC="Eucalyptus cluster controller"
NAME=eucalyptus-cc
EUCA_USER="eucalyptus"

export EUCALYPTUS="/"
EUCAHELPERDIR=$EUCALYPTUS/usr/share/eucalyptus
EUCASBINDIR=$EUCALYPTUS/usr/sbin
EUCACONFDIR=$EUCALYPTUS/etc/eucalyptus
EUCADATADIR=$EUCALYPTUS/usr/share/eucalyptus
EUCARUNDIR=$EUCALYPTUS/var/run/eucalyptus
EUCALOGDIR=$EUCALYPTUS/var/log/eucalyptus
EUCALIBEXECDIR="$EUCALYPTUS/usr/libexec/eucalyptus/"

# crude way to start the axis2c services
do_start() {
	# fixes #469984 (was against NC but CC may have similar issue)
	IPTABLES="`which iptables 2> /dev/null`"
	if [ -n "$IPTABLES" ]; then
		[ -x $IPTABLES ] && $IPTABLES -L -n > /dev/null 2> /dev/null
	fi

	if ! $EUCASBINDIR/euca_conf --check cc ; then
		exit 1
	fi

	# we need IP forwarding and we need to use iptable over the bridge
	if [ -w /proc/sys/net/ipv4/ip_forward ]; then
		VAL=`cat /proc/sys/net/ipv4/ip_forward`
		if [ "$VAL" = "0" ]; then
			echo
			echo -n "Enabling IP forwarding"
			echo -n 1 > /proc/sys/net/ipv4/ip_forward
		fi
	fi

	# if in MANAGED or STATIC mode, we need to use
	# dhcpd, so better check we know how to use it
	if [ "$VNET_MODE" = "MANAGED" -o "$VNET_MODE" = "STATIC" ]; then
		if [ -z "$VNET_DHCPDAEMON" -o ! -x $VNET_DHCPDAEMON ]; then
			echo
			echo "Cannot find dhcp server!"
			exit 1
		fi
		if ! $VNET_DHCPDAEMON --help 2>&1 |grep -- -tf > /dev/null ; then
			echo
			echo "dhcp server doesn't accept -tf option!"
		fi
	fi

	ulimit -u 100000
	ulimit -n 10000
	# now we start the services
	if  ! httpd -f $EUCACONFDIR/httpd/conf/httpd-cc.conf ; then
		echo
		echo "Failed to start the CC!"
		exit 1
	fi
}

do_status() {
	pidfile=$EUCARUNDIR/eucalyptus-cc.pid
	if [ -s $pidfile ]; then
		pid=`cat $pidfile 2> /dev/null`
		if ps axww|grep $pid|grep httpd-cc.conf > /dev/null ; then
			# we are good
			return 0
		fi
	fi
	return 1
}

# fully clean up all local CC state
do_fullclean() {
	pidfiles="`ls -1 $EUCARUNDIR/vtund*.pid 2>/dev/null`"
        pids=""
        sids=""
        for pidfile in $pidfiles ; do
            if [ -s $pidfile ]; then
                pid=`cat $pidfile 2> /dev/null`
                sids="$pid $sids"
                morepids="$pid"
                for i in `pgrep -P $pid`; do
                    morepids="$morepids `echo $i`"
                    morepids="$morepids `pgrep -P $i`"
                done
                pids="$pids $morepids"
                rm -f $pidfile
            fi
        done
        if [ -n "$pids" ]; then
            kill -15 $pids >/dev/null 2>&1
            pkill -15 -s $sids >/dev/null 2>&1
        fi

        dopkill=0
        for pid in $pids ; do
            timeout=5
            while [ $timeout -gt 0 ]; do
                if ps $pid > /dev/null 2>&1 ; then
                    sleep 1
                    timeout=$(($timeout - 1))
                    dopkill=1
                else
                    break
                fi
            done
            if [ $timeout -eq 0 ]; then
                kill -9 ${pid} >/dev/null 2>&1
            fi
        done
        if [ $dopkill -gt 0 ]; then
            pkill -9 -s $sids >/dev/null 2>&1
        fi

	rm -f $EUCASTATEDIR/CC/*
	rm -f /dev/shm/*eucalyptusCC*    
}

do_stop() {
        pidfile="$EUCARUNDIR/eucalyptus-cc.pid"

        # let's be sure we are killing the right process                                                                                                                                                                                    
        if ! do_status ; then
                rm -f $pidfile
                return
        fi
        # now kill the services                                                                                                                                                                                                             
        pidfiles="$EUCARUNDIR/net/euca-dhcp.pid $EUCARUNDIR/eucalyptus-cc.pid $EUCARUNDIR/httpd-dynserv.pid"
        pids=""
        sids=""
        for pidfile in $pidfiles ; do
            if [ -s $pidfile ]; then
                pid=`cat $pidfile 2> /dev/null`
                sids="$pid $sids"
                morepids="$pid"
                for i in `pgrep -P $pid`; do
                    morepids="$morepids `echo $i`"
                    morepids="$morepids `pgrep -P $i`"
                done
                pids="$pids $morepids"
                rm -f $pidfile
            fi
        done
        if [ -n "$pids" ]; then
            kill -15 $pids >/dev/null 2>&1
            pkill -9 -s $sids >/dev/null 2>&1
        fi

        dopkill=0
        for pid in $pids ; do
            timeout=5
            while [ $timeout -gt 0 ]; do
                if ps $pid > /dev/null 2>&1 ; then
                    sleep 1
                    timeout=$(($timeout - 1))
                    dopkill=1
                else
                    break
                fi
            done
            if [ $timeout -eq 0 ]; then
                kill -9 ${pid} >/dev/null 2>&1
            fi
        done
        if [ $dopkill -gt 0 ]; then
            pkill -9 -s $sids >/dev/null 2>&1
        fi
}

# set the library path correctly
export LD_LIBRARY_PATH="/usr/lib64/wso2-axis2/modules/rampart"
export AXIS2C_HOME=/usr/lib64/eucalyptus/axis2/cc
export WSFCPP_HOME=/usr/lib64/eucalyptus/axis2/cc

case "$1" in
  start)
	if [ "$VERBOSE" != no ]; then
		if [ "$WE_HAVE_LSB" = "Y" ]; then
			log_daemon_msg "Starting $DESC" "$NAME"
		else
			echo -n "Starting $DESC: "
		fi
	fi
	
	# let's check there is no previous CC running
	if do_status ; then
		echo
		echo "another CC is already running!"
		if [ "$VERBOSE" != no ]; then
			 if [ "$WE_HAVE_LSB" = "Y" ]; then
				log_end_msg 1
			fi
		fi
		exit 1
	fi

	# start and stop are hard: clear the semaphores
	rm -f /dev/shm/*eucalyptusCC*
	do_start
	case "$?" in
	0|1) 
		if [ "$VERBOSE" != no ]; then
			if [ "$WE_HAVE_LSB" = "Y" ]; then
				log_end_msg 0
			else
				echo "done."
			fi
		fi
		;;
	*)
		if [ "$VERBOSE" != no ]; then
			if [ "$WE_HAVE_LSB" = "Y" ]; then
				log_end_msg 1
			else
				echo "failed!"
			fi
		fi
		;;
	esac
	;;
  cleanstart)
	if [ "$VERBOSE" != no ]; then
		if [ "$WE_HAVE_LSB" = "Y" ]; then
			log_daemon_msg "Starting $DESC" "$NAME"
		else
			echo -n "Starting $DESC: "
		fi
	fi
	
	# let's check there is no previous CC running
	if do_status ; then
		echo
		echo "another CC is already running!"
		if [ "$VERBOSE" != no ]; then
			 if [ "$WE_HAVE_LSB" = "Y" ]; then
				log_end_msg 1
			fi
		fi
		exit 1
	fi

	# start and stop are hard: clear the semaphores
	rm -f /dev/shm/*eucalyptusCC*
	do_fullclean
	do_start
	case "$?" in
	0|1) 
		if [ "$VERBOSE" != no ]; then
			if [ "$WE_HAVE_LSB" = "Y" ]; then
				log_end_msg 0
			else
				echo "done."
			fi
		fi
		;;
	*)
		if [ "$VERBOSE" != no ]; then
			if [ "$WE_HAVE_LSB" = "Y" ]; then
				log_end_msg 1
			else
				echo "failed!"
			fi
		fi
		;;
	esac
	;;
  stop)
	if [ "$VERBOSE" != no ]; then
       		if [ "$WE_HAVE_LSB" = "Y" ]; then
			log_begin_msg "Stopping $DESC"
		else
			echo -n "Stopping $DESC: "
                fi
        fi
	# start and stop are hard: we loose the CC state
	do_stop
	rm -f /dev/shm/*eucalyptusCC*
	if [ "$VERBOSE" != no ]; then
		if [ "$WE_HAVE_LSB" = "Y" ]; then
			log_end_msg 0
		else
			echo "done."
		fi
	fi
	;;
  cleanstop)
	if [ "$VERBOSE" != no ]; then
       		if [ "$WE_HAVE_LSB" = "Y" ]; then
			log_begin_msg "Stopping $DESC"
		else
			echo -n "Stopping $DESC: "
                fi
        fi
	# start and stop are hard: we lose the CC state
	if ( test -f $EUCALIBEXECDIR/shutdownCC ); then
	    $EUCALIBEXECDIR/shutdownCC localhost:$CC_PORT >/dev/null 2>&1
	else
	    echo "WARNING: could not find $EUCALYPTUS$LIBEXECDIR/shutdownCC, please check location of executable"
	fi
	
	do_stop
	do_fullclean
	rm -f /dev/shm/*eucalyptusCC*
	if [ "$VERBOSE" != no ]; then
		if [ "$WE_HAVE_LSB" = "Y" ]; then
			log_end_msg 0
		else
			echo "done."
		fi
	fi
	;;
  restart)
	if [ "$VERBOSE" != no ]; then
		if [ "$WE_HAVE_LSB" = "Y" ]; then
			log_begin_msg "Restarting $DESC"
		else
			echo -n "Restarting $DESC: "
		fi
	fi
	# restart allow the CC to mantain the state across restart
	do_stop
	rm -f /dev/shm/*eucalyptusCC*
	do_start
	if [ "$VERBOSE" != no ]; then
		if [ "$WE_HAVE_LSB" = "Y" ]; then
			log_end_msg 0
		else
			echo "done."
		fi
	fi
  	;;
  cleanrestart)
	if [ "$VERBOSE" != no ]; then
		if [ "$WE_HAVE_LSB" = "Y" ]; then
			log_begin_msg "Restarting $DESC"
		else
			echo -n "Restarting $DESC: "
		fi
	fi

	if ( test -f $EUCALYPTUS$LIBEXECDIR/shutdownCC ); then
	    $EUCALYPTUS$LIBEXECDIR/shutdownCC localhost:$CC_PORT >/dev/null 2>&1
	else
	    echo "WARNING: could not find $EUCALYPTUS$LIBEXECDIR/shutdownCC, please check location of executable"
	fi

	do_stop
	do_fullclean
	rm -f /dev/shm/*eucalyptusCC*
	do_start
	if [ "$VERBOSE" != no ]; then
		if [ "$WE_HAVE_LSB" = "Y" ]; then
			log_end_msg 0
		else
			echo "done."
		fi
	fi
	;;
  status)
	if do_status ; then
		echo "CC is running"
	else
		exit 3
	fi
        ;;

  *)
	echo "Usage: $NAME {start|stop|restart|cleanstart|cleanstop|cleanrestart}" >&2
	exit 3
	;;
esac

:
