diff -ur eucalyptus-3.bzr1505/clc/modules/msgs/src/main/java/com/eucalyptus/bootstrap/Hosts.java eucalyptus-3.bzr1505.new/clc/modules/msgs/src/main/java/com/eucalyptus/bootstrap/Hosts.java
--- eucalyptus-3.bzr1505/clc/modules/msgs/src/main/java/com/eucalyptus/bootstrap/Hosts.java	2012-02-09 02:24:49.000000000 -0500
+++ eucalyptus-3.bzr1505.new/clc/modules/msgs/src/main/java/com/eucalyptus/bootstrap/Hosts.java	2012-02-09 04:23:00.567409190 -0500
@@ -63,8 +63,8 @@
 
 package com.eucalyptus.bootstrap;
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
+import java.io.DataInput;
+import java.io.DataOutput;
 import java.io.IOException;
 import java.net.InetAddress;
 import java.util.Collection;
@@ -84,7 +84,6 @@
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import org.apache.log4j.Logger;
 import org.jgroups.Address;
-import org.jgroups.ChannelException;
 import org.jgroups.Global;
 import org.jgroups.Header;
 import org.jgroups.JChannel;
@@ -482,7 +481,7 @@
     }
     
     @Override
-    public void viewChange( final View currentView, final Vector<Address> joinMembers, final Vector<Address> partMembers ) {
+    public void viewChange( final View currentView, final List<Address> joinMembers, final List<Address> partMembers ) {
       LOG.info( "Hosts.viewChange(): " + printMap( ) );
       LOG.info( "Hosts.viewChange(): new view => " + Joiner.on( ", " ).join( currentView.getMembers( ) ) );
       if ( !joinMembers.isEmpty( ) ) LOG.info( "Hosts.viewChange(): joined   => " + Joiner.on( ", " ).join( joinMembers ) );
@@ -753,9 +752,9 @@
         LOG.info( "Starting membership channel... " );
         this.membershipChannel.connect( SystemIds.membershipGroupName( ) );
         HostManager.registerHeader( EpochHeader.class );
-        this.membershipChannel.downcall( new org.jgroups.Event( org.jgroups.Event.GET_PHYSICAL_ADDRESS, this.membershipChannel.getAddress( ) ) );
+        this.membershipChannel.down( new org.jgroups.Event( org.jgroups.Event.GET_PHYSICAL_ADDRESS, this.membershipChannel.getAddress( ) ) );
         LOG.info( "Started membership channel: " + SystemIds.membershipGroupName( ) );
-      } catch ( final ChannelException ex ) {
+      } catch ( final Exception ex ) {
         LOG.fatal( ex, ex );
         throw BootstrapException.throwFatal( "Failed to connect membership channel because of " + ex.getMessage( ), ex );
       }
@@ -823,12 +822,12 @@
       }
       
       @Override
-      public void writeTo( final DataOutputStream out ) throws IOException {
+      public void writeTo( final DataOutput out ) throws IOException {
         out.writeInt( this.value );
       }
       
       @Override
-      public void readFrom( final DataInputStream in ) throws IOException, IllegalAccessException, InstantiationException {
+      public void readFrom( final DataInput in ) throws IOException, IllegalAccessException, InstantiationException {
         this.value = in.readInt( );
       }
       
@@ -854,7 +853,7 @@
         HostManager.getInstance( );
         LOG.info( "Started membership channel " + SystemIds.membershipGroupName( ) );
         hostMap = new ReplicatedHashMap<String, Host>( HostManager.getMembershipChannel( ) );
-        hostMap.setDeadlockDetection( true );
+        // hostMap.setDeadlockDetection( true );
         hostMap.setBlockingUpdates( true );
         Runnable runMap = new Runnable( ) {
           public void run( ) {
